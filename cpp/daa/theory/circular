// implement circular linked list
// feature tail->next =head;
//  singly doubly is similar
// in circular doubly we have head->prev =tail and tail->next = head;
#include <bits/stdc++.h>
using namespace std;

class node
{
public:
  int data;
  node *next;
  node(int data)
  {
    this->data = data;
    next = nullptr;
  }
};

class LinkedList
{
private:
  node *head, *tail;

public:
  LinkedList()
  {
    head = nullptr;
    tail = nullptr;
  }
  void print()
  {
    // prints the linke dlist
    node *temp = head;
    if (head == nullptr)
    {
      cout << "linked list is empty" << endl;
      return;
    }
    while (temp->next != head)
    {
      cout << temp->data << " ";
      temp = temp->next;
    }
    cout << temp->data << endl;
    cout << endl;
  }

  void insertAtHead(int val)
  {
    node *new_node = new node(val);
    if (head == nullptr)
    {
      head = new_node;
      tail = new_node;
      tail->next = head;
      return;
    }
    new_node->next = head;
    head = new_node;
    tail->next = head;
  }

  void insertAtTail(int val)
  {
    node *new_node = new node(val);
    if (tail == nullptr)
    {
      // empty linked list
      head = new_node;
      tail = new_node;
      tail->next = head;
      return;
    }
    node *temp = head;
    while (temp->next != head)
    {
      temp = temp->next;
      // move head to point to tail;
    }
    tail->next = new_node;
    new_node->next = head;
    tail = new_node;
  }

  void insert(int val, int pos)
  {
    // insert at given pos in linked list
    if (pos == 1 || head == nullptr)
    {
      insertAtHead(val);
      return;
    }
    int i = 1;
    node *temp = head;
    while (i < pos - 1)
    {
      temp = temp->next;
      i++;
    }
    if (temp == nullptr)
    {
      cout << "we got out the linked list fuck it" << endl;
    }
    if (temp->next == nullptr)
    {

      // tail guys
      insertAtTail(val);
      return;
    }
    // }
    node *new_node = new node(val);
    new_node->next = temp->next;
    temp->next = new_node;
  }

  // deleting in a linked list
  void deleteHead()
  {
    //
    if (head == nullptr)
    {
      cout << "fuck the linked list was empty get this linked list some elements" << endl;
      return;
    }
    node *temp = head;
    head = head->next;
    tail->next = head;
    temp->next = nullptr;
    delete temp;
  }

  void deleteTail()
  {
    if (tail == nullptr)
    {
      cout << "Linked list empty get this linked list some elements" << endl;
    }
    node *temp = head;
    while (temp->next != tail)
    {
      temp = temp->next;
    }
    node *to_be_deleted = temp->next; // tail
    temp->next = head;
    delete to_be_deleted;
  }

  void deleteAtPos(int pos)
  {
    // write the code no mood to repeat this repeatitive procdure
  }
};

int main()
{
  LinkedList ll;
  int val = 6;
  int pos = 1;
  ll.insertAtHead(3);
  ll.insertAtHead(2);
  ll.insertAtHead(1);
  ll.insertAtTail(4);
  ll.insertAtTail(5);
  ll.insert(val, pos);
  ll.deleteHead();
  ll.deleteTail();
  ll.print();
}